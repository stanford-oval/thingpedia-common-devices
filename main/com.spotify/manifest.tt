// Copyright 2018 Gabby Wright, Hemanth Kini
//           2018-2020 The Board of Trustees of the Leland Stanford Junior University
//           2020 Ryan Cheng
//           2021 Aydan Pirani
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above
//    copyright notice, this list of conditions and the following
//    disclaimer in the documentation and/or other materials
//    provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.

class @com.spotify extends @org.thingpedia.media-player, @org.thingpedia.media-source
#_[thingpedia_name="Spotify"]
#_[thingpedia_description="Play music on Spotify"]
#_[canonical="spotify"]
#[license="BSD-3-Clause"]
#[license_gplcompatible=true]
#[subcategory="media"]
#_[name="Spotify Account of ${display_name}"]
#_[description="This is your Spotify Account"]
{
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.oauth2(
    client_id=$?, client_secret="",
    use_pkce=true,
    authorize="https://accounts.spotify.com/authorize"^^tt:url,
    get_access_token="https://accounts.spotify.com/api/token"^^tt:url,
    scope=["streaming", "playlist-read-collaborative", "playlist-modify-private", "playlist-read-private", "playlist-modify-public", "user-read-email", "user-read-private", "user-read-playback-state", "user-read-currently-playing", "user-modify-playback-state", "user-read-recently-played", "user-top-read", "user-follow-read", "user-follow-modify", "user-library-read", "user-library-modify"],
    get_profile="https://api.spotify.com/v1/me"^^tt:url,
    profile=["id", "display_name", "product"]
  );

  action add_song_to_playlist(in req song : Entity(org.thingpedia.media-source:song)
                                #[string_values="tt:song_name"]
                                #_[prompt=["what song do you want to add"]]
                                #_[canonical={
                                  default="base",
                                  base=["song name name"],
                                  property=["song name #", "song title #"]
                                }],
                              in req playlist: String
                                #[string_values="com.spotify:playlist"]
                                #_[prompt=["what playlist do you want to add to"]]
                                #_[canonical={
                                  default="base",
                                  base=["name"],
                                  preposition=["named #", "called #", "titled #"],
                                  property=["name #", "title #"]
                                }])
  #_[canonical=["add a song to a playlist", "add a track to a playlist"]]
  #_[confirmation="add the song $song to the playlist $playlist"]
  #_[on_error={
    disallowed_action=["you cannot add songs to this playlist"],
    no_playlist=["could not find this playlist"],
    rate_limit_error=["spotify is temporarily unavailable"]
  }]
  #[confirm=enum auto]
  #[minimal_projection=[]];

  action create_playlist(in req name : String
                          #[string_values="com.spotify:playlist"]
                          #_[prompt=["what do you want to name your playlist"]]
                          #_[canonical={
                            default="base",
                            base=["name"],
                            preposition=["named #", "called #", "titled #"],
                            property=["name #", "title #"]
                          }])
  #_[canonical=["create a new playlist", "create playlist"]]
  #_[confirmation="create a playlist named $playlistName"]
  #_[on_error={
    disallowed_action=["failed to create a playlist"],
    rate_limit_error=["spotify is temporarily unavailable"]
  }]
  #[confirm=enum auto]
  #[minimal_projection=[]];

    monitorable list query get_user_top_tracks(out song: Entity(org.thingpedia.media-source:song)
                                               #[string_values="tt:song_name"])
    #_[canonical=["spotify top tracks", "my favorite songs",
                  "my top tracks"]]
    #_[confirmation="my top tracks in Spotify"]
    #_[on_error={
      rate_limit_error=["spotify is temporarily unavailable"]
    }]
    #[poll_interval=3600000ms]
    #[doc="get user's top tracks in the last 4 weeks"];

}
