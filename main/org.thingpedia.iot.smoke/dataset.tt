dataset @org.thingpedia.iot.smoke language "en" {
    program  := @org.thingpedia.iot.smoke.state()
    #_[utterances=["is there any smoke?",
                   "check if there is any smoke",
                   "check whether smoke is detected",
                   "do you smell smoke?"]]
    #[name="StateThenNotify"];

    query  := @org.thingpedia.iot.smoke.state()
    #_[utterances=["if the sensor is detecting any smoke",
                   "whether the sensor is detecting smoke",
                   "if the smoke detector is catching any smoke",
                   "whether there is any smoke"]]
    #[name="State"];

    stream  := monitor (@org.thingpedia.iot.smoke.state())
    #_[utterances=["when the smoke detector starts or stops detecting smoke",
                   "when the smoke sensor starts or stops detecting smoke"]]
    #[name="MonitorState"];

    stream (p_state :Enum(detecting,nothing))  := monitor (@org.thingpedia.iot.smoke.state()), state == p_state
    #_[utterances=["when my sensor starts detecting ${p_state}",
                   "when my detector is detecting ${p_state}",
                   "the moment my sensor detects ${p_state}"]]
    #[name="MonitorStateByState"];

    stream  := monitor (@org.thingpedia.iot.smoke.state()), state == enum(detecting)
    #_[utterances=["when smoke is detected",
                   "when there is smoke",
                   "when it gets smokey",
                   "when you smell smoke",
                   "when the smoke smells smokey"]]
    #[name="MonitorStateByStateSmoke"];

    stream  := monitor (@org.thingpedia.iot.smoke.state()), state == enum(nothing)
    #_[utterances=["when no smoke is detected",
                   "when smoke is not detected anymore",
                   "when there is no smoke",
                   "when the smoke clears",
                   "when the smoke goes away"]]
    #[name="MonitorStateByStateNothing"];

    program (p_name :String)  := @org.thingpedia.iot.smoke(name=p_name).state()
    #_[utterances=["is there any smoke detected by the ${p_name} sensor?",
                   "check if there is any smoke detected by the ${p_name} sensor",
                   "check whether smoke is detected by my ${p_name} sensor"]]
    #[name="StateThenNotify1"];

    query (p_name :String)  := @org.thingpedia.iot.smoke(name=p_name).state()
    #_[utterances=["if the ${p_name} sensor is detecting any smoke",
                   "whether the ${p_name} sensor is detecting smoke",
                   "if the ${p_name} smoke detector is catching any smoke"]]
    #[name="State1"];

    stream (p_name :String)  := monitor (@org.thingpedia.iot.smoke(name=p_name).state())
    #_[utterances=["when the ${p_name} smoke detector starts or stops detecting smoke",
                   "when the ${p_name} smoke sensor starts or stops detecting smoke"]]
    #[name="MonitorState1"];

    stream (p_name :String)  := monitor (@org.thingpedia.iot.smoke(name=p_name).state()), state == enum(detecting)
    #_[utterances=["when smoke is detected by the ${p_name} sensor",
                   "when there is smoke by the ${p_name} sensor",
                   "when my ${p_name} sensor says it gets smokey",
                   "when my ${p_name} sensor smells smoke"]]
    #[name="MonitorStateByStateSmoke1"];

    stream (p_name :String)  := monitor (@org.thingpedia.iot.smoke(name=p_name).state()), state == enum(nothing)
    #_[utterances=["when no smoke is detected by the ${p_name} sensor",
                   "when the ${p_name} sensor is not detecting any smoke",
                   "when there is no smoke detected by the ${p_name} sensor",
                   "when my ${p_name} sensor detects that the smoke is cleared",
                   "when my ${p_name} sensor detects that the smoke has gone away"]]
    #[name="MonitorStateByStateNothing1"];

    stream (p_name :String, p_state :Enum(detecting,nothing))  := monitor (@org.thingpedia.iot.smoke(name=p_name).state()), state == p_state
    #_[utterances=["when my ${p_name} sensor starts detecting ${p_state}",
                   "when my ${p_name} detector is detecting ${p_state}",
                   "once my ${p_name} detector is detecting ${p_state}",
                   "the moment my ${p_name} sensor detects ${p_state}"]]
    #[name="MonitorStateByState1"];
}